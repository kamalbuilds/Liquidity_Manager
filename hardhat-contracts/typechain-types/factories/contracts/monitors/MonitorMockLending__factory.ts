/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MonitorMockLending,
  MonitorMockLendingInterface,
} from "../../../contracts/monitors/MonitorMockLending";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minHealthFactor",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
      {
        internalType: "address",
        name: "_link",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lendingAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_onBehalfOf",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lpsc",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "_sourceChainSelector",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "FailedToWithdrawEth",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "InvalidRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "NothingToWithdraw",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "performData",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101a06040523480156200001257600080fd5b506040516200276238038062002762833981810160405281019062000038919062000613565b3380600089600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000b25760006040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401620000a99190620006ed565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000159576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000150906200076b565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620001e057620001df81620003fa60201b60201c565b5b5050508760a081815250508673ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508573ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166101608173ffffffffffffffffffffffffffffffffffffffff16815250508067ffffffffffffffff166101808167ffffffffffffffff168152505060e05173ffffffffffffffffffffffffffffffffffffffff1663095ea7b360c0517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620003a59291906200079e565b6020604051808303816000875af1158015620003c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003eb919062000808565b505050505050505050620008ac565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200046b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000462906200088a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b6000819050919050565b62000543816200052e565b81146200054f57600080fd5b50565b600081519050620005638162000538565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005968262000569565b9050919050565b620005a88162000589565b8114620005b457600080fd5b50565b600081519050620005c8816200059d565b92915050565b600067ffffffffffffffff82169050919050565b620005ed81620005ce565b8114620005f957600080fd5b50565b6000815190506200060d81620005e2565b92915050565b600080600080600080600080610100898b03121562000637576200063662000529565b5b6000620006478b828c0162000552565b98505060206200065a8b828c01620005b7565b97505060406200066d8b828c01620005b7565b9650506060620006808b828c01620005b7565b9550506080620006938b828c01620005b7565b94505060a0620006a68b828c01620005b7565b93505060c0620006b98b828c01620005b7565b92505060e0620006cc8b828c01620005fc565b9150509295985092959890939650565b620006e78162000589565b82525050565b6000602082019050620007046000830184620006dc565b92915050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b6000620007536018836200070a565b915062000760826200071b565b602082019050919050565b60006020820190508181036000830152620007868162000744565b9050919050565b62000798816200052e565b82525050565b6000604082019050620007b56000830185620006dc565b620007c460208301846200078d565b9392505050565b60008115159050919050565b620007e281620007cb565b8114620007ee57600080fd5b50565b6000815190506200080281620007d7565b92915050565b60006020828403121562000821576200082062000529565b5b60006200083184828501620007f1565b91505092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000620008726017836200070a565b91506200087f826200083a565b602082019050919050565b60006020820190508181036000830152620008a58162000863565b9050919050565b60805160a05160c05160e0516101005161012051610140516101605161018051611e066200095c60003960006107980152600061056601526000818161049b01528181610608015281816109c80152610e450152600081816105ab0152610e2301526000818161045f015281816105cc0152818161098c0152610de7015260006107090152600061075c01526000818161043e015261096b015260008181610bfe0152610cce0152611e066000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806379ba50971161006657806379ba50971461015857806385572ffb146101625780638da5cb5b1461017e578063b0f479a11461019c578063f2fde38b146101ba5761009e565b806301ffc9a7146100a35780633aeac4e1146100d35780634585e33b146100ef57806351cff8d91461010b5780636e04ff0d14610127575b600080fd5b6100bd60048036038101906100b89190611081565b6101d6565b6040516100ca91906110c9565b60405180910390f35b6100ed60048036038101906100e89190611142565b6102a8565b005b610109600480360381019061010491906111e7565b6103ec565b005b61012560048036038101906101209190611234565b610867565b005b610141600480360381019061013c91906111e7565b610965565b60405161014f9291906112f1565b60405180910390f35b610160610a67565b005b61017c60048036038101906101779190611345565b610bfc565b005b610186610ca1565b604051610193919061139d565b60405180910390f35b6101a4610cca565b6040516101b1919061139d565b60405180910390f35b6101d460048036038101906101cf9190611234565b610cf2565b005b60007f85572ffb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102a157507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6102b0610d06565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102eb919061139d565b602060405180830381865afa158015610308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032c91906113ee565b905060008103610368576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016103a392919061142a565b6020604051808303816000875af11580156103c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e6919061147f565b50505050565b600160149054906101000a900460ff161561043c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104339061152f565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636ad9f9df7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016104d6919061139d565b602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051791906113ee565b10610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e9061159b565b60405180910390fd5b60006040518060a001604052807f0000000000000000000000000000000000000000000000000000000000000000604051602001610595919061139d565b60405160208183030381529060405281526020017f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b9f2c7b57f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610643919061139d565b6020604051808303816000875af1158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906113ee565b30604051602001610699939291906115bb565b6040516020818303038152906040528152602001600067ffffffffffffffff8111156106c8576106c76115f2565b5b60405190808252806020026020018201604052801561070157816020015b6106ee610fe5565b8152602001906001900390816106e65790505b5081526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166396f4e9f97f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b81526004016107d5929190611815565b6020604051808303816000875af11580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610818919061187b565b905060018060146101000a81548160ff021916908315150217905550807f54791b38f3859327992a1ca0590ad3c0f08feba98d1a4f56ab0dca74d203392a60405160405180910390a250505050565b61086f610d06565b6000479050600081036108ae576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516108d4906118d9565b60006040518083038185875af1925050503d8060008114610911576040519150601f19603f3d011682016040523d82523d6000602084013e610916565b606091505b5050905080610960573383836040517f9d11f563000000000000000000000000000000000000000000000000000000008152600401610957939291906118ee565b60405180910390fd5b505050565b600060607f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636ad9f9df7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610a03919061139d565b602060405180830381865afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4491906113ee565b108015610a5e5750600160149054906101000a900460ff16155b91509250929050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aee90611971565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c8c57336040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401610c83919061139d565b60405180910390fd5b610c9e81610c9990611ce5565b610d96565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610cfa610d06565b610d0381610eb9565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8b90611d44565b60405180910390fd5b565b6000600160146101000a81548160ff02191690831515021790555060008160600151806020019051810190610dcb919061187b565b90506000600260008381526020019081526020016000205490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f45346dc7f0000000000000000000000000000000000000000000000000000000000000000837f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401610e82939291906115bb565b600060405180830381600087803b158015610e9c57600080fd5b505af1158015610eb0573d6000803e3d6000fd5b50505050505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1e90611db0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61105e81611029565b811461106957600080fd5b50565b60008135905061107b81611055565b92915050565b6000602082840312156110975761109661101f565b5b60006110a58482850161106c565b91505092915050565b60008115159050919050565b6110c3816110ae565b82525050565b60006020820190506110de60008301846110ba565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061110f826110e4565b9050919050565b61111f81611104565b811461112a57600080fd5b50565b60008135905061113c81611116565b92915050565b600080604083850312156111595761115861101f565b5b60006111678582860161112d565b92505060206111788582860161112d565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111a7576111a6611182565b5b8235905067ffffffffffffffff8111156111c4576111c3611187565b5b6020830191508360018202830111156111e0576111df61118c565b5b9250929050565b600080602083850312156111fe576111fd61101f565b5b600083013567ffffffffffffffff81111561121c5761121b611024565b5b61122885828601611191565b92509250509250929050565b60006020828403121561124a5761124961101f565b5b60006112588482850161112d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561129b578082015181840152602081019050611280565b60008484015250505050565b6000601f19601f8301169050919050565b60006112c382611261565b6112cd818561126c565b93506112dd81856020860161127d565b6112e6816112a7565b840191505092915050565b600060408201905061130660008301856110ba565b818103602083015261131881846112b8565b90509392505050565b600080fd5b600060a0828403121561133c5761133b611321565b5b81905092915050565b60006020828403121561135b5761135a61101f565b5b600082013567ffffffffffffffff81111561137957611378611024565b5b61138584828501611326565b91505092915050565b61139781611104565b82525050565b60006020820190506113b2600083018461138e565b92915050565b6000819050919050565b6113cb816113b8565b81146113d657600080fd5b50565b6000815190506113e8816113c2565b92915050565b6000602082840312156114045761140361101f565b5b6000611412848285016113d9565b91505092915050565b611424816113b8565b82525050565b600060408201905061143f600083018561138e565b61144c602083018461141b565b9392505050565b61145c816110ae565b811461146757600080fd5b50565b60008151905061147981611453565b92915050565b6000602082840312156114955761149461101f565b5b60006114a38482850161146a565b91505092915050565b600082825260208201905092915050565b7f43434950204d65737361676520616c72656164792073656e742c20776169746960008201527f6e6720666f72206120726573706f6e7365000000000000000000000000000000602082015250565b60006115196031836114ac565b9150611524826114bd565b604082019050919050565b600060208201905081810360008301526115488161150c565b9050919050565b7f4163636f756e742063616e2774206265206c6971756964617465642100000000600082015250565b6000611585601c836114ac565b91506115908261154f565b602082019050919050565b600060208201905081810360008301526115b481611578565b9050919050565b60006060820190506115d0600083018661138e565b6115dd602083018561141b565b6115ea604083018461138e565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff82169050919050565b61163e81611621565b82525050565b600082825260208201905092915050565b600061166082611261565b61166a8185611644565b935061167a81856020860161127d565b611683816112a7565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6116c381611104565b82525050565b6116d2816113b8565b82525050565b6040820160008201516116ee60008501826116ba565b50602082015161170160208501826116c9565b50505050565b600061171383836116d8565b60408301905092915050565b6000602082019050919050565b60006117378261168e565b6117418185611699565b935061174c836116aa565b8060005b8381101561177d5781516117648882611707565b975061176f8361171f565b925050600181019050611750565b5085935050505092915050565b600060a08301600083015184820360008601526117a78282611655565b915050602083015184820360208601526117c18282611655565b915050604083015184820360408601526117db828261172c565b91505060608301516117f060608601826116ba565b50608083015184820360808601526118088282611655565b9150508091505092915050565b600060408201905061182a6000830185611635565b818103602083015261183c818461178a565b90509392505050565b6000819050919050565b61185881611845565b811461186357600080fd5b50565b6000815190506118758161184f565b92915050565b6000602082840312156118915761189061101f565b5b600061189f84828501611866565b91505092915050565b600081905092915050565b50565b60006118c36000836118a8565b91506118ce826118b3565b600082019050919050565b60006118e4826118b6565b9150819050919050565b6000606082019050611903600083018661138e565b611910602083018561138e565b61191d604083018461141b565b949350505050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b600061195b6016836114ac565b915061196682611925565b602082019050919050565b6000602082019050818103600083015261198a8161194e565b9050919050565b600080fd5b61199f826112a7565b810181811067ffffffffffffffff821117156119be576119bd6115f2565b5b80604052505050565b60006119d1611015565b90506119dd8282611996565b919050565b600080fd5b6000813590506119f68161184f565b92915050565b611a0581611621565b8114611a1057600080fd5b50565b600081359050611a22816119fc565b92915050565b600080fd5b600067ffffffffffffffff821115611a4857611a476115f2565b5b611a51826112a7565b9050602081019050919050565b82818337600083830152505050565b6000611a80611a7b84611a2d565b6119c7565b905082815260208101848484011115611a9c57611a9b611a28565b5b611aa7848285611a5e565b509392505050565b600082601f830112611ac457611ac3611182565b5b8135611ad4848260208601611a6d565b91505092915050565b600067ffffffffffffffff821115611af857611af76115f2565b5b602082029050602081019050919050565b600081359050611b18816113c2565b92915050565b600060408284031215611b3457611b33611991565b5b611b3e60406119c7565b90506000611b4e8482850161112d565b6000830152506020611b6284828501611b09565b60208301525092915050565b6000611b81611b7c84611add565b6119c7565b90508083825260208201905060408402830185811115611ba457611ba361118c565b5b835b81811015611bcd5780611bb98882611b1e565b845260208401935050604081019050611ba6565b5050509392505050565b600082601f830112611bec57611beb611182565b5b8135611bfc848260208601611b6e565b91505092915050565b600060a08284031215611c1b57611c1a611991565b5b611c2560a06119c7565b90506000611c35848285016119e7565b6000830152506020611c4984828501611a13565b602083015250604082013567ffffffffffffffff811115611c6d57611c6c6119e2565b5b611c7984828501611aaf565b604083015250606082013567ffffffffffffffff811115611c9d57611c9c6119e2565b5b611ca984828501611aaf565b606083015250608082013567ffffffffffffffff811115611ccd57611ccc6119e2565b5b611cd984828501611bd7565b60808301525092915050565b6000611cf13683611c05565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000611d2e6016836114ac565b9150611d3982611cf8565b602082019050919050565b60006020820190508181036000830152611d5d81611d21565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000611d9a6017836114ac565b9150611da582611d64565b602082019050919050565b60006020820190508181036000830152611dc981611d8d565b905091905056fea2646970667358221220e03f77c856a674d48b60650ae244b5ef8b8a0d39fa184db17876db14f901dc8464736f6c63430008130033";

type MonitorMockLendingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MonitorMockLendingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MonitorMockLending__factory extends ContractFactory {
  constructor(...args: MonitorMockLendingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _minHealthFactor: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    _lendingAddress: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    _onBehalfOf: PromiseOrValue<string>,
    _lpsc: PromiseOrValue<string>,
    _sourceChainSelector: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MonitorMockLending> {
    return super.deploy(
      _minHealthFactor,
      _router,
      _link,
      _lendingAddress,
      _tokenAddress,
      _onBehalfOf,
      _lpsc,
      _sourceChainSelector,
      overrides || {}
    ) as Promise<MonitorMockLending>;
  }
  override getDeployTransaction(
    _minHealthFactor: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    _link: PromiseOrValue<string>,
    _lendingAddress: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    _onBehalfOf: PromiseOrValue<string>,
    _lpsc: PromiseOrValue<string>,
    _sourceChainSelector: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _minHealthFactor,
      _router,
      _link,
      _lendingAddress,
      _tokenAddress,
      _onBehalfOf,
      _lpsc,
      _sourceChainSelector,
      overrides || {}
    );
  }
  override attach(address: string): MonitorMockLending {
    return super.attach(address) as MonitorMockLending;
  }
  override connect(signer: Signer): MonitorMockLending__factory {
    return super.connect(signer) as MonitorMockLending__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MonitorMockLendingInterface {
    return new utils.Interface(_abi) as MonitorMockLendingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MonitorMockLending {
    return new Contract(address, _abi, signerOrProvider) as MonitorMockLending;
  }
}
