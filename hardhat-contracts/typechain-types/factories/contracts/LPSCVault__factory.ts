/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { LPSCVault, LPSCVaultInterface } from "../../contracts/LPSCVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "FailedToWithdrawEth",
    type: "error",
  },
  {
    inputs: [],
    name: "NothingToWithdraw",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000ef438038062000ef483398181016040528101906200003791906200030a565b338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a3906200039d565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620001335762000132816200017160201b60201c565b5b5050508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000431565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001d9906200040f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002d282620002a5565b9050919050565b620002e481620002c5565b8114620002f057600080fd5b50565b6000815190506200030481620002d9565b92915050565b600060208284031215620003235762000322620002a0565b5b60006200033384828501620002f3565b91505092915050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b6000620003856018836200033c565b915062000392826200034d565b602082019050919050565b60006020820190508181036000830152620003b88162000376565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000620003f76017836200033c565b91506200040482620003bf565b602082019050919050565b600060208201905081810360008301526200042a81620003e8565b9050919050565b608051610aaa6200044a60003960005050610aaa6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633aeac4e11461005c57806351cff8d91461007857806379ba5097146100945780638da5cb5b1461009e578063f2fde38b146100bc575b600080fd5b6100766004803603810190610071919061070b565b6100d8565b005b610092600480360381019061008d919061074b565b61021c565b005b61009c61031a565b005b6100a66104af565b6040516100b39190610787565b60405180910390f35b6100d660048036038101906100d1919061074b565b6104d8565b005b6100e06104ec565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161011b9190610787565b602060405180830381865afa158015610138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015c91906107d8565b905060008103610198576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b81526004016101d3929190610814565b6020604051808303816000875af11580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102169190610875565b50505050565b6102246104ec565b600047905060008103610263576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610289906108d3565b60006040518083038185875af1925050503d80600081146102c6576040519150601f19603f3d011682016040523d82523d6000602084013e6102cb565b606091505b5050905080610315573383836040517f9d11f56300000000000000000000000000000000000000000000000000000000815260040161030c939291906108e8565b60405180910390fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a19061097c565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104e06104ec565b6104e98161057c565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461057a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610571906109e8565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e190610a54565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106d8826106ad565b9050919050565b6106e8816106cd565b81146106f357600080fd5b50565b600081359050610705816106df565b92915050565b60008060408385031215610722576107216106a8565b5b6000610730858286016106f6565b9250506020610741858286016106f6565b9150509250929050565b600060208284031215610761576107606106a8565b5b600061076f848285016106f6565b91505092915050565b610781816106cd565b82525050565b600060208201905061079c6000830184610778565b92915050565b6000819050919050565b6107b5816107a2565b81146107c057600080fd5b50565b6000815190506107d2816107ac565b92915050565b6000602082840312156107ee576107ed6106a8565b5b60006107fc848285016107c3565b91505092915050565b61080e816107a2565b82525050565b60006040820190506108296000830185610778565b6108366020830184610805565b9392505050565b60008115159050919050565b6108528161083d565b811461085d57600080fd5b50565b60008151905061086f81610849565b92915050565b60006020828403121561088b5761088a6106a8565b5b600061089984828501610860565b91505092915050565b600081905092915050565b50565b60006108bd6000836108a2565b91506108c8826108ad565b600082019050919050565b60006108de826108b0565b9150819050919050565b60006060820190506108fd6000830186610778565b61090a6020830185610778565b6109176040830184610805565b949350505050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b600061096660168361091f565b915061097182610930565b602082019050919050565b6000602082019050818103600083015261099581610959565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006109d260168361091f565b91506109dd8261099c565b602082019050919050565b60006020820190508181036000830152610a01816109c5565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000610a3e60178361091f565b9150610a4982610a08565b602082019050919050565b60006020820190508181036000830152610a6d81610a31565b905091905056fea2646970667358221220980d6614430b3a1f81c9a7ae6fd52586c6b4d8e6653e5da7326312f7779de17c64736f6c63430008130033";

type LPSCVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LPSCVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LPSCVault__factory extends ContractFactory {
  constructor(...args: LPSCVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LPSCVault> {
    return super.deploy(vault, overrides || {}) as Promise<LPSCVault>;
  }
  override getDeployTransaction(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(vault, overrides || {});
  }
  override attach(address: string): LPSCVault {
    return super.attach(address) as LPSCVault;
  }
  override connect(signer: Signer): LPSCVault__factory {
    return super.connect(signer) as LPSCVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPSCVaultInterface {
    return new utils.Interface(_abi) as LPSCVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LPSCVault {
    return new Contract(address, _abi, signerOrProvider) as LPSCVault;
  }
}
