/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockLending,
  MockLendingInterface,
} from "../../../contracts/mocks/MockLending";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "FailedToWithdrawEth",
    type: "error",
  },
  {
    inputs: [],
    name: "NothingToWithdraw",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "inBehalfOf",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "inBehalfOf",
        type: "address",
      },
    ],
    name: "getBorrowedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "healthFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000087576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200007e90620002a7565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200010e576200010d816200011760201b60201c565b5b5050506200033b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000188576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017f9062000319565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006200028f60188362000246565b91506200029c8262000257565b602082019050919050565b60006020820190508181036000830152620002c28162000280565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006200030160178362000246565b91506200030e82620002c9565b602082019050919050565b600060208201905081810360008301526200033481620002f2565b9050919050565b610de0806200034b6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ff578063b9f2c7b51461011d578063f2fde38b1461014d578063f45346dc1461016957610088565b80633aeac4e11461008d57806351cff8d9146100a95780636ad9f9df146100c557806379ba5097146100f5575b600080fd5b6100a760048036038101906100a291906108fb565b610185565b005b6100c360048036038101906100be919061093b565b6102c9565b005b6100df60048036038101906100da919061093b565b6103c7565b6040516100ec9190610981565b60405180910390f35b6100fd61041c565b005b6101076105b1565b60405161011491906109ab565b60405180910390f35b6101376004803603810190610132919061093b565b6105da565b6040516101449190610981565b60405180910390f35b6101676004803603810190610162919061093b565b6105ec565b005b610183600480360381019061017e91906109f2565b610600565b005b61018d6106dc565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101c891906109ab565b602060405180830381865afa1580156101e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102099190610a5a565b905060008103610245576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401610280929190610a87565b6020604051808303816000875af115801561029f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c39190610ae8565b50505050565b6102d16106dc565b600047905060008103610310576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161033690610b46565b60006040518083038185875af1925050503d8060008114610373576040519150601f19603f3d011682016040523d82523d6000602084013e610378565b606091505b50509050806103c2573383836040517f9d11f5630000000000000000000000000000000000000000000000000000000081526004016103b993929190610b5b565b60405180910390fd5b505050565b60006001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104159190610bf0565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a390610c7e565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000670de0b6b3a76400009050919050565b6105f46106dc565b6105fd8161076c565b50565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161063d93929190610b5b565b6020604051808303816000875af115801561065c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106809190610ae8565b5081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106d09190610c9e565b92505081905550505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076190610d1e565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d190610d8a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108c88261089d565b9050919050565b6108d8816108bd565b81146108e357600080fd5b50565b6000813590506108f5816108cf565b92915050565b6000806040838503121561091257610911610898565b5b6000610920858286016108e6565b9250506020610931858286016108e6565b9150509250929050565b60006020828403121561095157610950610898565b5b600061095f848285016108e6565b91505092915050565b6000819050919050565b61097b81610968565b82525050565b60006020820190506109966000830184610972565b92915050565b6109a5816108bd565b82525050565b60006020820190506109c0600083018461099c565b92915050565b6109cf81610968565b81146109da57600080fd5b50565b6000813590506109ec816109c6565b92915050565b600080600060608486031215610a0b57610a0a610898565b5b6000610a19868287016108e6565b9350506020610a2a868287016109dd565b9250506040610a3b868287016108e6565b9150509250925092565b600081519050610a54816109c6565b92915050565b600060208284031215610a7057610a6f610898565b5b6000610a7e84828501610a45565b91505092915050565b6000604082019050610a9c600083018561099c565b610aa96020830184610972565b9392505050565b60008115159050919050565b610ac581610ab0565b8114610ad057600080fd5b50565b600081519050610ae281610abc565b92915050565b600060208284031215610afe57610afd610898565b5b6000610b0c84828501610ad3565b91505092915050565b600081905092915050565b50565b6000610b30600083610b15565b9150610b3b82610b20565b600082019050919050565b6000610b5182610b23565b9150819050919050565b6000606082019050610b70600083018661099c565b610b7d602083018561099c565b610b8a6040830184610972565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bfb82610968565b9150610c0683610968565b925082610c1657610c15610b92565b5b828204905092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000610c68601683610c21565b9150610c7382610c32565b602082019050919050565b60006020820190508181036000830152610c9781610c5b565b9050919050565b6000610ca982610968565b9150610cb483610968565b9250828201905080821115610ccc57610ccb610bc1565b5b92915050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000610d08601683610c21565b9150610d1382610cd2565b602082019050919050565b60006020820190508181036000830152610d3781610cfb565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000610d74601783610c21565b9150610d7f82610d3e565b602082019050919050565b60006020820190508181036000830152610da381610d67565b905091905056fea2646970667358221220774989b0d3d3d313bcc95018a83a96b32bfcddb300aab1668ddd94d12045408464736f6c63430008130033";

type MockLendingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLendingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLending__factory extends ContractFactory {
  constructor(...args: MockLendingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockLending> {
    return super.deploy(overrides || {}) as Promise<MockLending>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockLending {
    return super.attach(address) as MockLending;
  }
  override connect(signer: Signer): MockLending__factory {
    return super.connect(signer) as MockLending__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLendingInterface {
    return new utils.Interface(_abi) as MockLendingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLending {
    return new Contract(address, _abi, signerOrProvider) as MockLending;
  }
}
