/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CCIPReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCIPReceiver__factory>;
    getContractFactory(
      name: "IAny2EVMMessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAny2EVMMessageReceiver__factory>;
    getContractFactory(
      name: "IRouterClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouterClient__factory>;
    getContractFactory(
      name: "Client",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Client__factory>;
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "OwnableInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableInterface__factory>;
    getContractFactory(
      name: "OwnerIsCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerIsCreator__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ERC677Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677Token__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Basic__factory>;
    getContractFactory(
      name: "ERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677__factory>;
    getContractFactory(
      name: "ERC677Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677Receiver__factory>;
    getContractFactory(
      name: "LinkToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkToken__factory>;
    getContractFactory(
      name: "BasicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicToken__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;
    getContractFactory(
      name: "AggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorInterface__factory>;
    getContractFactory(
      name: "AggregatorV2V3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV2V3Interface__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "MockV3Aggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockV3Aggregator__factory>;
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "OCR2Abstract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OCR2Abstract__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "AutomationCompatibleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationCompatibleInterface__factory>;
    getContractFactory(
      name: "ERC677ReceiverInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677ReceiverInterface__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "OwnableInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableInterface__factory>;
    getContractFactory(
      name: "TypeAndVersionInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TypeAndVersionInterface__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "ITransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "AuthorizedReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthorizedReceiver__factory>;
    getContractFactory(
      name: "AuthorizedOriginReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthorizedOriginReceiverUpgradeable__factory>;
    getContractFactory(
      name: "ConfirmedOwnerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerUpgradeable__factory>;
    getContractFactory(
      name: "Functions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Functions__factory>;
    getContractFactory(
      name: "FunctionsBillingRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionsBillingRegistry__factory>;
    getContractFactory(
      name: "FunctionsClient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionsClient__factory>;
    getContractFactory(
      name: "FunctionsOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionsOracle__factory>;
    getContractFactory(
      name: "AuthorizedOriginReceiverInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthorizedOriginReceiverInterface__factory>;
    getContractFactory(
      name: "AuthorizedReceiverInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthorizedReceiverInterface__factory>;
    getContractFactory(
      name: "FunctionsBillingRegistryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionsBillingRegistryInterface__factory>;
    getContractFactory(
      name: "FunctionsClientInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionsClientInterface__factory>;
    getContractFactory(
      name: "FunctionsOracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionsOracleInterface__factory>;
    getContractFactory(
      name: "OCR2Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OCR2Base__factory>;
    getContractFactory(
      name: "OCR2BaseUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OCR2BaseUpgradeable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ILendingPoolAaveV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAaveV2__factory>;
    getContractFactory(
      name: "IL2PoolAaveV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2PoolAaveV3__factory>;
    getContractFactory(
      name: "IPoolAaveV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAaveV3__factory>;
    getContractFactory(
      name: "IComet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComet__factory>;
    getContractFactory(
      name: "IComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComptroller__factory>;
    getContractFactory(
      name: "ICToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICToken__factory>;
    getContractFactory(
      name: "IMockLending",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMockLending__factory>;
    getContractFactory(
      name: "LPSC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPSC__factory>;
    getContractFactory(
      name: "FunctionsConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FunctionsConsumer__factory>;
    getContractFactory(
      name: "LPSCRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPSCRegistry__factory>;
    getContractFactory(
      name: "LPSCVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPSCVault__factory>;
    getContractFactory(
      name: "MockLending",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLending__factory>;
    getContractFactory(
      name: "IBurnMintERC677Helper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBurnMintERC677Helper__factory>;
    getContractFactory(
      name: "MockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVault__factory>;
    getContractFactory(
      name: "MonitorAaveV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MonitorAaveV2__factory>;
    getContractFactory(
      name: "MonitorAaveV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MonitorAaveV3__factory>;
    getContractFactory(
      name: "MonitorCompoundV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MonitorCompoundV2__factory>;
    getContractFactory(
      name: "MonitorCompoundV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MonitorCompoundV3__factory>;
    getContractFactory(
      name: "MonitorMockLending",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MonitorMockLending__factory>;
    getContractFactory(
      name: "Withdraw",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Withdraw__factory>;

    getContractAt(
      name: "CCIPReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CCIPReceiver>;
    getContractAt(
      name: "IAny2EVMMessageReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAny2EVMMessageReceiver>;
    getContractAt(
      name: "IRouterClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouterClient>;
    getContractAt(
      name: "Client",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Client>;
    getContractAt(
      name: "ConfirmedOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "OwnableInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableInterface>;
    getContractAt(
      name: "OwnerIsCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerIsCreator>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ERC677Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677Token>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Basic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Basic>;
    getContractAt(
      name: "ERC677",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677>;
    getContractAt(
      name: "ERC677Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677Receiver>;
    getContractAt(
      name: "LinkToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkToken>;
    getContractAt(
      name: "BasicToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicToken>;
    getContractAt(
      name: "StandardToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardToken>;
    getContractAt(
      name: "AggregatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorInterface>;
    getContractAt(
      name: "AggregatorV2V3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV2V3Interface>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "MockV3Aggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockV3Aggregator>;
    getContractAt(
      name: "ConfirmedOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "OCR2Abstract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OCR2Abstract>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "AutomationCompatibleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationCompatibleInterface>;
    getContractAt(
      name: "ERC677ReceiverInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677ReceiverInterface>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "OwnableInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableInterface>;
    getContractAt(
      name: "TypeAndVersionInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TypeAndVersionInterface>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "ITransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "AuthorizedReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthorizedReceiver>;
    getContractAt(
      name: "AuthorizedOriginReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthorizedOriginReceiverUpgradeable>;
    getContractAt(
      name: "ConfirmedOwnerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerUpgradeable>;
    getContractAt(
      name: "Functions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Functions>;
    getContractAt(
      name: "FunctionsBillingRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionsBillingRegistry>;
    getContractAt(
      name: "FunctionsClient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionsClient>;
    getContractAt(
      name: "FunctionsOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionsOracle>;
    getContractAt(
      name: "AuthorizedOriginReceiverInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthorizedOriginReceiverInterface>;
    getContractAt(
      name: "AuthorizedReceiverInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthorizedReceiverInterface>;
    getContractAt(
      name: "FunctionsBillingRegistryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionsBillingRegistryInterface>;
    getContractAt(
      name: "FunctionsClientInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionsClientInterface>;
    getContractAt(
      name: "FunctionsOracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionsOracleInterface>;
    getContractAt(
      name: "OCR2Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OCR2Base>;
    getContractAt(
      name: "OCR2BaseUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OCR2BaseUpgradeable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ILendingPoolAaveV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAaveV2>;
    getContractAt(
      name: "IL2PoolAaveV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2PoolAaveV3>;
    getContractAt(
      name: "IPoolAaveV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAaveV3>;
    getContractAt(
      name: "IComet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComet>;
    getContractAt(
      name: "IComptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComptroller>;
    getContractAt(
      name: "ICToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICToken>;
    getContractAt(
      name: "IMockLending",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMockLending>;
    getContractAt(
      name: "LPSC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPSC>;
    getContractAt(
      name: "FunctionsConsumer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FunctionsConsumer>;
    getContractAt(
      name: "LPSCRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPSCRegistry>;
    getContractAt(
      name: "LPSCVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPSCVault>;
    getContractAt(
      name: "MockLending",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLending>;
    getContractAt(
      name: "IBurnMintERC677Helper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBurnMintERC677Helper>;
    getContractAt(
      name: "MockVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVault>;
    getContractAt(
      name: "MonitorAaveV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MonitorAaveV2>;
    getContractAt(
      name: "MonitorAaveV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MonitorAaveV3>;
    getContractAt(
      name: "MonitorCompoundV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MonitorCompoundV2>;
    getContractAt(
      name: "MonitorCompoundV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MonitorCompoundV3>;
    getContractAt(
      name: "MonitorMockLending",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MonitorMockLending>;
    getContractAt(
      name: "Withdraw",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Withdraw>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
