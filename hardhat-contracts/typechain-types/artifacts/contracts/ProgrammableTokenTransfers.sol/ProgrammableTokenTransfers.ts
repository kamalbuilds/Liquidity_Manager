/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type EVMTokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type Any2EVMMessageStruct = {
    messageId: PromiseOrValue<BytesLike>;
    sourceChainSelector: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<BytesLike>;
    data: PromiseOrValue<BytesLike>;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    string,
    BigNumber,
    string,
    string,
    Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: BigNumber;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export interface ProgrammableTokenTransfersInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "allowlistDestinationChain(uint64,bool)": FunctionFragment;
    "allowlistSender(address,bool)": FunctionFragment;
    "allowlistSourceChain(uint64,bool)": FunctionFragment;
    "allowlistedDestinationChains(uint64)": FunctionFragment;
    "allowlistedSenders(address)": FunctionFragment;
    "allowlistedSourceChains(uint64)": FunctionFragment;
    "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": FunctionFragment;
    "getFailedMessagesIds()": FunctionFragment;
    "getLastReceivedMessageDetails()": FunctionFragment;
    "getRouter()": FunctionFragment;
    "owner()": FunctionFragment;
    "processMessage((bytes32,uint64,bytes,bytes,(address,uint256)[]))": FunctionFragment;
    "retryFailedMessage(bytes32,address)": FunctionFragment;
    "s_messageContents(bytes32)": FunctionFragment;
    "sendMessagePayLINK(uint64,address,string,address,uint256)": FunctionFragment;
    "sendMessagePayNative(uint64,address,string,address,uint256)": FunctionFragment;
    "setSimRevert(bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawToken(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "allowlistDestinationChain"
      | "allowlistSender"
      | "allowlistSourceChain"
      | "allowlistedDestinationChains"
      | "allowlistedSenders"
      | "allowlistedSourceChains"
      | "ccipReceive"
      | "getFailedMessagesIds"
      | "getLastReceivedMessageDetails"
      | "getRouter"
      | "owner"
      | "processMessage"
      | "retryFailedMessage"
      | "s_messageContents"
      | "sendMessagePayLINK"
      | "sendMessagePayNative"
      | "setSimRevert"
      | "supportsInterface"
      | "transferOwnership"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistDestinationChain",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistSender",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistSourceChain",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedDestinationChains",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedSenders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedSourceChains",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ccipReceive",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getFailedMessagesIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastReceivedMessageDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processMessage",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "retryFailedMessage",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_messageContents",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessagePayLINK",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessagePayNative",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSimRevert",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistDestinationChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistSourceChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedDestinationChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedSourceChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFailedMessagesIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastReceivedMessageDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryFailedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_messageContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessagePayLINK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessagePayNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSimRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "MessageFailed(bytes32,bytes)": EventFragment;
    "MessageReceived(bytes32,uint64,address,string,address,uint256)": EventFragment;
    "MessageRecovered(bytes32)": EventFragment;
    "MessageSent(bytes32,uint64,address,string,address,uint256,address,uint256)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MessageFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageRecovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface MessageFailedEventObject {
  messageId: string;
  reason: string;
}
export type MessageFailedEvent = TypedEvent<
  [string, string],
  MessageFailedEventObject
>;

export type MessageFailedEventFilter = TypedEventFilter<MessageFailedEvent>;

export interface MessageReceivedEventObject {
  messageId: string;
  sourceChainSelector: BigNumber;
  sender: string;
  text: string;
  token: string;
  tokenAmount: BigNumber;
}
export type MessageReceivedEvent = TypedEvent<
  [string, BigNumber, string, string, string, BigNumber],
  MessageReceivedEventObject
>;

export type MessageReceivedEventFilter = TypedEventFilter<MessageReceivedEvent>;

export interface MessageRecoveredEventObject {
  messageId: string;
}
export type MessageRecoveredEvent = TypedEvent<
  [string],
  MessageRecoveredEventObject
>;

export type MessageRecoveredEventFilter =
  TypedEventFilter<MessageRecoveredEvent>;

export interface MessageSentEventObject {
  messageId: string;
  destinationChainSelector: BigNumber;
  receiver: string;
  text: string;
  token: string;
  tokenAmount: BigNumber;
  feeToken: string;
  fees: BigNumber;
}
export type MessageSentEvent = TypedEvent<
  [string, BigNumber, string, string, string, BigNumber, string, BigNumber],
  MessageSentEventObject
>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProgrammableTokenTransfers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProgrammableTokenTransfersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowlistDestinationChain(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowlistSender(
      _sender: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowlistSourceChain(
      _sourceChainSelector: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowlistedDestinationChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowlistedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowlistedSourceChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ccipReceive(
      any2EvmMessage: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFailedMessagesIds(
      overrides?: CallOverrides
    ): Promise<[string[]] & { ids: string[] }>;

    getLastReceivedMessageDetails(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        messageId: string;
        text: string;
        tokenAddress: string;
        tokenAmount: BigNumber;
      }
    >;

    getRouter(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processMessage(
      any2EvmMessage: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retryFailedMessage(
      messageId: PromiseOrValue<BytesLike>,
      tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    s_messageContents(
      messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        messageId: string;
        sourceChainSelector: BigNumber;
        sender: string;
        data: string;
      }
    >;

    sendMessagePayLINK(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendMessagePayNative(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSimRevert(
      simRevert: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _beneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowlistDestinationChain(
    _destinationChainSelector: PromiseOrValue<BigNumberish>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowlistSender(
    _sender: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowlistSourceChain(
    _sourceChainSelector: PromiseOrValue<BigNumberish>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowlistedDestinationChains(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowlistedSenders(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowlistedSourceChains(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ccipReceive(
    any2EvmMessage: Client.Any2EVMMessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFailedMessagesIds(overrides?: CallOverrides): Promise<string[]>;

  getLastReceivedMessageDetails(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      messageId: string;
      text: string;
      tokenAddress: string;
      tokenAmount: BigNumber;
    }
  >;

  getRouter(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  processMessage(
    any2EvmMessage: Client.Any2EVMMessageStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retryFailedMessage(
    messageId: PromiseOrValue<BytesLike>,
    tokenReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  s_messageContents(
    messageId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      messageId: string;
      sourceChainSelector: BigNumber;
      sender: string;
      data: string;
    }
  >;

  sendMessagePayLINK(
    _destinationChainSelector: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    _text: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendMessagePayNative(
    _destinationChainSelector: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    _text: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSimRevert(
    simRevert: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _beneficiary: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    allowlistDestinationChain(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowlistSender(
      _sender: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowlistSourceChain(
      _sourceChainSelector: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowlistedDestinationChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowlistedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowlistedSourceChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ccipReceive(
      any2EvmMessage: Client.Any2EVMMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getFailedMessagesIds(overrides?: CallOverrides): Promise<string[]>;

    getLastReceivedMessageDetails(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        messageId: string;
        text: string;
        tokenAddress: string;
        tokenAmount: BigNumber;
      }
    >;

    getRouter(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    processMessage(
      any2EvmMessage: Client.Any2EVMMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    retryFailedMessage(
      messageId: PromiseOrValue<BytesLike>,
      tokenReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    s_messageContents(
      messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        messageId: string;
        sourceChainSelector: BigNumber;
        sender: string;
        data: string;
      }
    >;

    sendMessagePayLINK(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    sendMessagePayNative(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setSimRevert(
      simRevert: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _beneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MessageFailed(bytes32,bytes)"(
      messageId?: PromiseOrValue<BytesLike> | null,
      reason?: null
    ): MessageFailedEventFilter;
    MessageFailed(
      messageId?: PromiseOrValue<BytesLike> | null,
      reason?: null
    ): MessageFailedEventFilter;

    "MessageReceived(bytes32,uint64,address,string,address,uint256)"(
      messageId?: PromiseOrValue<BytesLike> | null,
      sourceChainSelector?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      text?: null,
      token?: null,
      tokenAmount?: null
    ): MessageReceivedEventFilter;
    MessageReceived(
      messageId?: PromiseOrValue<BytesLike> | null,
      sourceChainSelector?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      text?: null,
      token?: null,
      tokenAmount?: null
    ): MessageReceivedEventFilter;

    "MessageRecovered(bytes32)"(
      messageId?: PromiseOrValue<BytesLike> | null
    ): MessageRecoveredEventFilter;
    MessageRecovered(
      messageId?: PromiseOrValue<BytesLike> | null
    ): MessageRecoveredEventFilter;

    "MessageSent(bytes32,uint64,address,string,address,uint256,address,uint256)"(
      messageId?: PromiseOrValue<BytesLike> | null,
      destinationChainSelector?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      text?: null,
      token?: null,
      tokenAmount?: null,
      feeToken?: null,
      fees?: null
    ): MessageSentEventFilter;
    MessageSent(
      messageId?: PromiseOrValue<BytesLike> | null,
      destinationChainSelector?: PromiseOrValue<BigNumberish> | null,
      receiver?: null,
      text?: null,
      token?: null,
      tokenAmount?: null,
      feeToken?: null,
      fees?: null
    ): MessageSentEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowlistDestinationChain(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowlistSender(
      _sender: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowlistSourceChain(
      _sourceChainSelector: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowlistedDestinationChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowlistedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowlistedSourceChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ccipReceive(
      any2EvmMessage: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFailedMessagesIds(overrides?: CallOverrides): Promise<BigNumber>;

    getLastReceivedMessageDetails(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouter(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processMessage(
      any2EvmMessage: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retryFailedMessage(
      messageId: PromiseOrValue<BytesLike>,
      tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    s_messageContents(
      messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendMessagePayLINK(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendMessagePayNative(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSimRevert(
      simRevert: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _beneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowlistDestinationChain(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowlistSender(
      _sender: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowlistSourceChain(
      _sourceChainSelector: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowlistedDestinationChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowlistedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowlistedSourceChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ccipReceive(
      any2EvmMessage: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFailedMessagesIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastReceivedMessageDetails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processMessage(
      any2EvmMessage: Client.Any2EVMMessageStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retryFailedMessage(
      messageId: PromiseOrValue<BytesLike>,
      tokenReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    s_messageContents(
      messageId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendMessagePayLINK(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendMessagePayNative(
      _destinationChainSelector: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _text: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSimRevert(
      simRevert: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _beneficiary: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
