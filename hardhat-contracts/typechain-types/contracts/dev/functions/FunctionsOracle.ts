/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace FunctionsBillingRegistryInterface {
  export type RequestBillingStruct = {
    subscriptionId: PromiseOrValue<BigNumberish>;
    client: PromiseOrValue<string>;
    gasLimit: PromiseOrValue<BigNumberish>;
    gasPrice: PromiseOrValue<BigNumberish>;
  };

  export type RequestBillingStructOutput = [
    BigNumber,
    string,
    number,
    BigNumber
  ] & {
    subscriptionId: BigNumber;
    client: string;
    gasLimit: number;
    gasPrice: BigNumber;
  };
}

export interface FunctionsOracleInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "activateAuthorizedReceiver()": FunctionFragment;
    "addAuthorizedSenders(address[])": FunctionFragment;
    "authorizedReceiverActive()": FunctionFragment;
    "deactivateAuthorizedReceiver()": FunctionFragment;
    "deleteNodePublicKey(address)": FunctionFragment;
    "estimateCost(uint64,bytes,uint32,uint256)": FunctionFragment;
    "getAllNodePublicKeys()": FunctionFragment;
    "getAuthorizedSenders()": FunctionFragment;
    "getDONPublicKey()": FunctionFragment;
    "getRegistry()": FunctionFragment;
    "getRequiredFee(bytes,(uint64,address,uint32,uint256))": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAuthorizedSender(address)": FunctionFragment;
    "latestConfigDetails()": FunctionFragment;
    "latestConfigDigestAndEpoch()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAuthorizedSenders(address[])": FunctionFragment;
    "sendRequest(uint64,bytes,uint32)": FunctionFragment;
    "setConfig(address[],address[],uint8,bytes,uint64,bytes)": FunctionFragment;
    "setDONPublicKey(bytes)": FunctionFragment;
    "setNodePublicKey(address,bytes)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transmit(bytes32[3],bytes,bytes32[],bytes32[],bytes32)": FunctionFragment;
    "transmitters()": FunctionFragment;
    "typeAndVersion()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "activateAuthorizedReceiver"
      | "addAuthorizedSenders"
      | "authorizedReceiverActive"
      | "deactivateAuthorizedReceiver"
      | "deleteNodePublicKey"
      | "estimateCost"
      | "getAllNodePublicKeys"
      | "getAuthorizedSenders"
      | "getDONPublicKey"
      | "getRegistry"
      | "getRequiredFee"
      | "initialize"
      | "isAuthorizedSender"
      | "latestConfigDetails"
      | "latestConfigDigestAndEpoch"
      | "owner"
      | "removeAuthorizedSenders"
      | "sendRequest"
      | "setConfig"
      | "setDONPublicKey"
      | "setNodePublicKey"
      | "setRegistry"
      | "transferOwnership"
      | "transmit"
      | "transmitters"
      | "typeAndVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateAuthorizedReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedSenders",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedReceiverActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAuthorizedReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteNodePublicKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCost",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNodePublicKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDONPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredFee",
    values: [
      PromiseOrValue<BytesLike>,
      FunctionsBillingRegistryInterface.RequestBillingStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigDigestAndEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedSenders",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDONPublicKey",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodePublicKey",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transmit",
    values: [
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateAuthorizedReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedReceiverActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAuthorizedReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteNodePublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNodePublicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigDigestAndEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDONPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodePublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transmit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizedSendersActive(address)": EventFragment;
    "AuthorizedSendersChanged(address[],address)": EventFragment;
    "AuthorizedSendersDeactive(address)": EventFragment;
    "ConfigSet(uint32,bytes32,uint64,address[],address[],uint8,bytes,uint64,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InvalidRequestID(bytes32)": EventFragment;
    "OracleRequest(bytes32,address,address,uint64,address,bytes)": EventFragment;
    "OracleResponse(bytes32)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transmitted(bytes32,uint32)": EventFragment;
    "UserCallbackError(bytes32,string)": EventFragment;
    "UserCallbackRawError(bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedSendersActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedSendersChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedSendersDeactive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidRequestID"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleResponse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserCallbackError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserCallbackRawError"): EventFragment;
}

export interface AuthorizedSendersActiveEventObject {
  account: string;
}
export type AuthorizedSendersActiveEvent = TypedEvent<
  [string],
  AuthorizedSendersActiveEventObject
>;

export type AuthorizedSendersActiveEventFilter =
  TypedEventFilter<AuthorizedSendersActiveEvent>;

export interface AuthorizedSendersChangedEventObject {
  senders: string[];
  changedBy: string;
}
export type AuthorizedSendersChangedEvent = TypedEvent<
  [string[], string],
  AuthorizedSendersChangedEventObject
>;

export type AuthorizedSendersChangedEventFilter =
  TypedEventFilter<AuthorizedSendersChangedEvent>;

export interface AuthorizedSendersDeactiveEventObject {
  account: string;
}
export type AuthorizedSendersDeactiveEvent = TypedEvent<
  [string],
  AuthorizedSendersDeactiveEventObject
>;

export type AuthorizedSendersDeactiveEventFilter =
  TypedEventFilter<AuthorizedSendersDeactiveEvent>;

export interface ConfigSetEventObject {
  previousConfigBlockNumber: number;
  configDigest: string;
  configCount: BigNumber;
  signers: string[];
  transmitters: string[];
  f: number;
  onchainConfig: string;
  offchainConfigVersion: BigNumber;
  offchainConfig: string;
}
export type ConfigSetEvent = TypedEvent<
  [
    number,
    string,
    BigNumber,
    string[],
    string[],
    number,
    string,
    BigNumber,
    string
  ],
  ConfigSetEventObject
>;

export type ConfigSetEventFilter = TypedEventFilter<ConfigSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InvalidRequestIDEventObject {
  requestId: string;
}
export type InvalidRequestIDEvent = TypedEvent<
  [string],
  InvalidRequestIDEventObject
>;

export type InvalidRequestIDEventFilter =
  TypedEventFilter<InvalidRequestIDEvent>;

export interface OracleRequestEventObject {
  requestId: string;
  requestingContract: string;
  requestInitiator: string;
  subscriptionId: BigNumber;
  subscriptionOwner: string;
  data: string;
}
export type OracleRequestEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  OracleRequestEventObject
>;

export type OracleRequestEventFilter = TypedEventFilter<OracleRequestEvent>;

export interface OracleResponseEventObject {
  requestId: string;
}
export type OracleResponseEvent = TypedEvent<
  [string],
  OracleResponseEventObject
>;

export type OracleResponseEventFilter = TypedEventFilter<OracleResponseEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransmittedEventObject {
  configDigest: string;
  epoch: number;
}
export type TransmittedEvent = TypedEvent<
  [string, number],
  TransmittedEventObject
>;

export type TransmittedEventFilter = TypedEventFilter<TransmittedEvent>;

export interface UserCallbackErrorEventObject {
  requestId: string;
  reason: string;
}
export type UserCallbackErrorEvent = TypedEvent<
  [string, string],
  UserCallbackErrorEventObject
>;

export type UserCallbackErrorEventFilter =
  TypedEventFilter<UserCallbackErrorEvent>;

export interface UserCallbackRawErrorEventObject {
  requestId: string;
  lowLevelData: string;
}
export type UserCallbackRawErrorEvent = TypedEvent<
  [string, string],
  UserCallbackRawErrorEventObject
>;

export type UserCallbackRawErrorEventFilter =
  TypedEventFilter<UserCallbackRawErrorEvent>;

export interface FunctionsOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FunctionsOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateAuthorizedReceiver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizedReceiverActive(overrides?: CallOverrides): Promise<[boolean]>;

    deactivateAuthorizedReceiver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteNodePublicKey(
      node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateCost(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllNodePublicKeys(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getAuthorizedSenders(overrides?: CallOverrides): Promise<[string[]]>;

    getDONPublicKey(overrides?: CallOverrides): Promise<[string]>;

    getRegistry(overrides?: CallOverrides): Promise<[string]>;

    getRequiredFee(
      arg0: PromiseOrValue<BytesLike>,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latestConfigDetails(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string] & {
        configCount: number;
        blockNumber: number;
        configDigest: string;
      }
    >;

    latestConfigDigestAndEpoch(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, number] & {
        scanLogs: boolean;
        configDigest: string;
        epoch: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRequest(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      _signers: PromiseOrValue<string>[],
      _transmitters: PromiseOrValue<string>[],
      _f: PromiseOrValue<BigNumberish>,
      _onchainConfig: PromiseOrValue<BytesLike>,
      _offchainConfigVersion: PromiseOrValue<BigNumberish>,
      _offchainConfig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDONPublicKey(
      donPublicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNodePublicKey(
      node: PromiseOrValue<string>,
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transmit(
      reportContext: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      report: PromiseOrValue<BytesLike>,
      rs: PromiseOrValue<BytesLike>[],
      ss: PromiseOrValue<BytesLike>[],
      rawVs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transmitters(overrides?: CallOverrides): Promise<[string[]]>;

    typeAndVersion(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateAuthorizedReceiver(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAuthorizedSenders(
    senders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizedReceiverActive(overrides?: CallOverrides): Promise<boolean>;

  deactivateAuthorizedReceiver(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteNodePublicKey(
    node: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateCost(
    subscriptionId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    gasLimit: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllNodePublicKeys(
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  getAuthorizedSenders(overrides?: CallOverrides): Promise<string[]>;

  getDONPublicKey(overrides?: CallOverrides): Promise<string>;

  getRegistry(overrides?: CallOverrides): Promise<string>;

  getRequiredFee(
    arg0: PromiseOrValue<BytesLike>,
    arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAuthorizedSender(
    sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestConfigDetails(
    overrides?: CallOverrides
  ): Promise<
    [number, number, string] & {
      configCount: number;
      blockNumber: number;
      configDigest: string;
    }
  >;

  latestConfigDigestAndEpoch(
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, number] & {
      scanLogs: boolean;
      configDigest: string;
      epoch: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  removeAuthorizedSenders(
    senders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRequest(
    subscriptionId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    _signers: PromiseOrValue<string>[],
    _transmitters: PromiseOrValue<string>[],
    _f: PromiseOrValue<BigNumberish>,
    _onchainConfig: PromiseOrValue<BytesLike>,
    _offchainConfigVersion: PromiseOrValue<BigNumberish>,
    _offchainConfig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDONPublicKey(
    donPublicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNodePublicKey(
    node: PromiseOrValue<string>,
    publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    registryAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transmit(
    reportContext: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    report: PromiseOrValue<BytesLike>,
    rs: PromiseOrValue<BytesLike>[],
    ss: PromiseOrValue<BytesLike>[],
    rawVs: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transmitters(overrides?: CallOverrides): Promise<string[]>;

  typeAndVersion(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    activateAuthorizedReceiver(overrides?: CallOverrides): Promise<void>;

    addAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedReceiverActive(overrides?: CallOverrides): Promise<boolean>;

    deactivateAuthorizedReceiver(overrides?: CallOverrides): Promise<void>;

    deleteNodePublicKey(
      node: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    estimateCost(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllNodePublicKeys(
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    getAuthorizedSenders(overrides?: CallOverrides): Promise<string[]>;

    getDONPublicKey(overrides?: CallOverrides): Promise<string>;

    getRegistry(overrides?: CallOverrides): Promise<string>;

    getRequiredFee(
      arg0: PromiseOrValue<BytesLike>,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestConfigDetails(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string] & {
        configCount: number;
        blockNumber: number;
        configDigest: string;
      }
    >;

    latestConfigDigestAndEpoch(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, number] & {
        scanLogs: boolean;
        configDigest: string;
        epoch: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    removeAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    sendRequest(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setConfig(
      _signers: PromiseOrValue<string>[],
      _transmitters: PromiseOrValue<string>[],
      _f: PromiseOrValue<BigNumberish>,
      _onchainConfig: PromiseOrValue<BytesLike>,
      _offchainConfigVersion: PromiseOrValue<BigNumberish>,
      _offchainConfig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDONPublicKey(
      donPublicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNodePublicKey(
      node: PromiseOrValue<string>,
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transmit(
      reportContext: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      report: PromiseOrValue<BytesLike>,
      rs: PromiseOrValue<BytesLike>[],
      ss: PromiseOrValue<BytesLike>[],
      rawVs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transmitters(overrides?: CallOverrides): Promise<string[]>;

    typeAndVersion(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AuthorizedSendersActive(address)"(
      account?: null
    ): AuthorizedSendersActiveEventFilter;
    AuthorizedSendersActive(account?: null): AuthorizedSendersActiveEventFilter;

    "AuthorizedSendersChanged(address[],address)"(
      senders?: null,
      changedBy?: null
    ): AuthorizedSendersChangedEventFilter;
    AuthorizedSendersChanged(
      senders?: null,
      changedBy?: null
    ): AuthorizedSendersChangedEventFilter;

    "AuthorizedSendersDeactive(address)"(
      account?: null
    ): AuthorizedSendersDeactiveEventFilter;
    AuthorizedSendersDeactive(
      account?: null
    ): AuthorizedSendersDeactiveEventFilter;

    "ConfigSet(uint32,bytes32,uint64,address[],address[],uint8,bytes,uint64,bytes)"(
      previousConfigBlockNumber?: null,
      configDigest?: null,
      configCount?: null,
      signers?: null,
      transmitters?: null,
      f?: null,
      onchainConfig?: null,
      offchainConfigVersion?: null,
      offchainConfig?: null
    ): ConfigSetEventFilter;
    ConfigSet(
      previousConfigBlockNumber?: null,
      configDigest?: null,
      configCount?: null,
      signers?: null,
      transmitters?: null,
      f?: null,
      onchainConfig?: null,
      offchainConfigVersion?: null,
      offchainConfig?: null
    ): ConfigSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InvalidRequestID(bytes32)"(
      requestId?: PromiseOrValue<BytesLike> | null
    ): InvalidRequestIDEventFilter;
    InvalidRequestID(
      requestId?: PromiseOrValue<BytesLike> | null
    ): InvalidRequestIDEventFilter;

    "OracleRequest(bytes32,address,address,uint64,address,bytes)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      requestingContract?: null,
      requestInitiator?: null,
      subscriptionId?: null,
      subscriptionOwner?: null,
      data?: null
    ): OracleRequestEventFilter;
    OracleRequest(
      requestId?: PromiseOrValue<BytesLike> | null,
      requestingContract?: null,
      requestInitiator?: null,
      subscriptionId?: null,
      subscriptionOwner?: null,
      data?: null
    ): OracleRequestEventFilter;

    "OracleResponse(bytes32)"(
      requestId?: PromiseOrValue<BytesLike> | null
    ): OracleResponseEventFilter;
    OracleResponse(
      requestId?: PromiseOrValue<BytesLike> | null
    ): OracleResponseEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transmitted(bytes32,uint32)"(
      configDigest?: null,
      epoch?: null
    ): TransmittedEventFilter;
    Transmitted(configDigest?: null, epoch?: null): TransmittedEventFilter;

    "UserCallbackError(bytes32,string)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      reason?: null
    ): UserCallbackErrorEventFilter;
    UserCallbackError(
      requestId?: PromiseOrValue<BytesLike> | null,
      reason?: null
    ): UserCallbackErrorEventFilter;

    "UserCallbackRawError(bytes32,bytes)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      lowLevelData?: null
    ): UserCallbackRawErrorEventFilter;
    UserCallbackRawError(
      requestId?: PromiseOrValue<BytesLike> | null,
      lowLevelData?: null
    ): UserCallbackRawErrorEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateAuthorizedReceiver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizedReceiverActive(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateAuthorizedReceiver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteNodePublicKey(
      node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateCost(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllNodePublicKeys(overrides?: CallOverrides): Promise<BigNumber>;

    getAuthorizedSenders(overrides?: CallOverrides): Promise<BigNumber>;

    getDONPublicKey(overrides?: CallOverrides): Promise<BigNumber>;

    getRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredFee(
      arg0: PromiseOrValue<BytesLike>,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestConfigDetails(overrides?: CallOverrides): Promise<BigNumber>;

    latestConfigDigestAndEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRequest(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig(
      _signers: PromiseOrValue<string>[],
      _transmitters: PromiseOrValue<string>[],
      _f: PromiseOrValue<BigNumberish>,
      _onchainConfig: PromiseOrValue<BytesLike>,
      _offchainConfigVersion: PromiseOrValue<BigNumberish>,
      _offchainConfig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDONPublicKey(
      donPublicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNodePublicKey(
      node: PromiseOrValue<string>,
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transmit(
      reportContext: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      report: PromiseOrValue<BytesLike>,
      rs: PromiseOrValue<BytesLike>[],
      ss: PromiseOrValue<BytesLike>[],
      rawVs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transmitters(overrides?: CallOverrides): Promise<BigNumber>;

    typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateAuthorizedReceiver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizedReceiverActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateAuthorizedReceiver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteNodePublicKey(
      node: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateCost(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllNodePublicKeys(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizedSenders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDONPublicKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredFee(
      arg0: PromiseOrValue<BytesLike>,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestConfigDetails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestConfigDigestAndEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRequest(
      subscriptionId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      _signers: PromiseOrValue<string>[],
      _transmitters: PromiseOrValue<string>[],
      _f: PromiseOrValue<BigNumberish>,
      _onchainConfig: PromiseOrValue<BytesLike>,
      _offchainConfigVersion: PromiseOrValue<BigNumberish>,
      _offchainConfig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDONPublicKey(
      donPublicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNodePublicKey(
      node: PromiseOrValue<string>,
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registryAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transmit(
      reportContext: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      report: PromiseOrValue<BytesLike>,
      rs: PromiseOrValue<BytesLike>[],
      ss: PromiseOrValue<BytesLike>[],
      rawVs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transmitters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
