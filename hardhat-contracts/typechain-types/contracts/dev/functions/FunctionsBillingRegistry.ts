/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace FunctionsBillingRegistry {
  export type CommitmentStruct = {
    subscriptionId: PromiseOrValue<BigNumberish>;
    client: PromiseOrValue<string>;
    gasLimit: PromiseOrValue<BigNumberish>;
    gasPrice: PromiseOrValue<BigNumberish>;
    don: PromiseOrValue<string>;
    donFee: PromiseOrValue<BigNumberish>;
    registryFee: PromiseOrValue<BigNumberish>;
    estimatedCost: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type CommitmentStructOutput = [
    BigNumber,
    string,
    number,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    subscriptionId: BigNumber;
    client: string;
    gasLimit: number;
    gasPrice: BigNumber;
    don: string;
    donFee: BigNumber;
    registryFee: BigNumber;
    estimatedCost: BigNumber;
    timestamp: BigNumber;
  };
}

export declare namespace FunctionsBillingRegistryInterface {
  export type RequestBillingStruct = {
    subscriptionId: PromiseOrValue<BigNumberish>;
    client: PromiseOrValue<string>;
    gasLimit: PromiseOrValue<BigNumberish>;
    gasPrice: PromiseOrValue<BigNumberish>;
  };

  export type RequestBillingStructOutput = [
    BigNumber,
    string,
    number,
    BigNumber
  ] & {
    subscriptionId: BigNumber;
    client: string;
    gasLimit: number;
    gasPrice: BigNumber;
  };
}

export interface FunctionsBillingRegistryInterface extends utils.Interface {
  functions: {
    "MAX_CONSUMERS()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "acceptSubscriptionOwnerTransfer(uint64)": FunctionFragment;
    "addConsumer(uint64,address)": FunctionFragment;
    "cancelSubscription(uint64,address)": FunctionFragment;
    "createSubscription()": FunctionFragment;
    "estimateCost(uint32,uint256,uint96,uint96)": FunctionFragment;
    "fulfillAndBill(bytes32,bytes,bytes,address,address[31],uint8,uint256,uint256)": FunctionFragment;
    "getAuthorizedSenders()": FunctionFragment;
    "getConfig()": FunctionFragment;
    "getCurrentsubscriptionId()": FunctionFragment;
    "getRequestConfig()": FunctionFragment;
    "getRequiredFee(bytes,(uint64,address,uint32,uint256))": FunctionFragment;
    "getSubscription(uint64)": FunctionFragment;
    "getSubscriptionOwner(uint64)": FunctionFragment;
    "getTotalBalance()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isAuthorizedSender(address)": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "oracleWithdraw(address,uint96)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerCancelSubscription(uint64)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingRequestExists(uint64)": FunctionFragment;
    "recoverFunds(address)": FunctionFragment;
    "removeConsumer(uint64,address)": FunctionFragment;
    "requestSubscriptionOwnerTransfer(uint64,address)": FunctionFragment;
    "setAuthorizedSenders(address[])": FunctionFragment;
    "setConfig(uint32,uint32,uint256,int256,uint32,uint32)": FunctionFragment;
    "startBilling(bytes,(uint64,address,uint32,uint256))": FunctionFragment;
    "timeoutRequests(bytes32[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_CONSUMERS"
      | "acceptOwnership"
      | "acceptSubscriptionOwnerTransfer"
      | "addConsumer"
      | "cancelSubscription"
      | "createSubscription"
      | "estimateCost"
      | "fulfillAndBill"
      | "getAuthorizedSenders"
      | "getConfig"
      | "getCurrentsubscriptionId"
      | "getRequestConfig"
      | "getRequiredFee"
      | "getSubscription"
      | "getSubscriptionOwner"
      | "getTotalBalance"
      | "initialize"
      | "isAuthorizedSender"
      | "onTokenTransfer"
      | "oracleWithdraw"
      | "owner"
      | "ownerCancelSubscription"
      | "pause"
      | "paused"
      | "pendingRequestExists"
      | "recoverFunds"
      | "removeConsumer"
      | "requestSubscriptionOwnerTransfer"
      | "setAuthorizedSenders"
      | "setConfig"
      | "startBilling"
      | "timeoutRequests"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_CONSUMERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateCost",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAndBill",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentsubscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredFee",
    values: [
      PromiseOrValue<BytesLike>,
      FunctionsBillingRegistryInterface.RequestBillingStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerCancelSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConsumer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSubscriptionOwnerTransfer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedSenders",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startBilling",
    values: [
      PromiseOrValue<BytesLike>,
      FunctionsBillingRegistryInterface.RequestBillingStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutRequests",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_CONSUMERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAndBill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentsubscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerCancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBilling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeoutRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AuthorizedSendersChanged(address[],address)": EventFragment;
    "BillingEnd(bytes32,uint64,uint96,uint96,uint96,bool)": EventFragment;
    "BillingStart(bytes32,tuple)": EventFragment;
    "ConfigSet(uint32,uint32,uint256,int256,uint32)": EventFragment;
    "FundsRecovered(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RequestTimedOut(bytes32)": EventFragment;
    "SubscriptionCanceled(uint64,address,uint256)": EventFragment;
    "SubscriptionConsumerAdded(uint64,address)": EventFragment;
    "SubscriptionConsumerRemoved(uint64,address)": EventFragment;
    "SubscriptionCreated(uint64,address)": EventFragment;
    "SubscriptionFunded(uint64,uint256,uint256)": EventFragment;
    "SubscriptionOwnerTransferRequested(uint64,address,address)": EventFragment;
    "SubscriptionOwnerTransferred(uint64,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedSendersChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BillingEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BillingStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsRecovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestTimedOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionConsumerAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubscriptionConsumerRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionFunded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubscriptionOwnerTransferRequested"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubscriptionOwnerTransferred"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AuthorizedSendersChangedEventObject {
  senders: string[];
  changedBy: string;
}
export type AuthorizedSendersChangedEvent = TypedEvent<
  [string[], string],
  AuthorizedSendersChangedEventObject
>;

export type AuthorizedSendersChangedEventFilter =
  TypedEventFilter<AuthorizedSendersChangedEvent>;

export interface BillingEndEventObject {
  requestId: string;
  subscriptionId: BigNumber;
  signerPayment: BigNumber;
  transmitterPayment: BigNumber;
  totalCost: BigNumber;
  success: boolean;
}
export type BillingEndEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  BillingEndEventObject
>;

export type BillingEndEventFilter = TypedEventFilter<BillingEndEvent>;

export interface BillingStartEventObject {
  requestId: string;
  commitment: FunctionsBillingRegistry.CommitmentStructOutput;
}
export type BillingStartEvent = TypedEvent<
  [string, FunctionsBillingRegistry.CommitmentStructOutput],
  BillingStartEventObject
>;

export type BillingStartEventFilter = TypedEventFilter<BillingStartEvent>;

export interface ConfigSetEventObject {
  maxGasLimit: number;
  stalenessSeconds: number;
  gasAfterPaymentCalculation: BigNumber;
  fallbackWeiPerUnitLink: BigNumber;
  gasOverhead: number;
}
export type ConfigSetEvent = TypedEvent<
  [number, number, BigNumber, BigNumber, number],
  ConfigSetEventObject
>;

export type ConfigSetEventFilter = TypedEventFilter<ConfigSetEvent>;

export interface FundsRecoveredEventObject {
  to: string;
  amount: BigNumber;
}
export type FundsRecoveredEvent = TypedEvent<
  [string, BigNumber],
  FundsRecoveredEventObject
>;

export type FundsRecoveredEventFilter = TypedEventFilter<FundsRecoveredEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RequestTimedOutEventObject {
  requestId: string;
}
export type RequestTimedOutEvent = TypedEvent<
  [string],
  RequestTimedOutEventObject
>;

export type RequestTimedOutEventFilter = TypedEventFilter<RequestTimedOutEvent>;

export interface SubscriptionCanceledEventObject {
  subscriptionId: BigNumber;
  to: string;
  amount: BigNumber;
}
export type SubscriptionCanceledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SubscriptionCanceledEventObject
>;

export type SubscriptionCanceledEventFilter =
  TypedEventFilter<SubscriptionCanceledEvent>;

export interface SubscriptionConsumerAddedEventObject {
  subscriptionId: BigNumber;
  consumer: string;
}
export type SubscriptionConsumerAddedEvent = TypedEvent<
  [BigNumber, string],
  SubscriptionConsumerAddedEventObject
>;

export type SubscriptionConsumerAddedEventFilter =
  TypedEventFilter<SubscriptionConsumerAddedEvent>;

export interface SubscriptionConsumerRemovedEventObject {
  subscriptionId: BigNumber;
  consumer: string;
}
export type SubscriptionConsumerRemovedEvent = TypedEvent<
  [BigNumber, string],
  SubscriptionConsumerRemovedEventObject
>;

export type SubscriptionConsumerRemovedEventFilter =
  TypedEventFilter<SubscriptionConsumerRemovedEvent>;

export interface SubscriptionCreatedEventObject {
  subscriptionId: BigNumber;
  owner: string;
}
export type SubscriptionCreatedEvent = TypedEvent<
  [BigNumber, string],
  SubscriptionCreatedEventObject
>;

export type SubscriptionCreatedEventFilter =
  TypedEventFilter<SubscriptionCreatedEvent>;

export interface SubscriptionFundedEventObject {
  subscriptionId: BigNumber;
  oldBalance: BigNumber;
  newBalance: BigNumber;
}
export type SubscriptionFundedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SubscriptionFundedEventObject
>;

export type SubscriptionFundedEventFilter =
  TypedEventFilter<SubscriptionFundedEvent>;

export interface SubscriptionOwnerTransferRequestedEventObject {
  subscriptionId: BigNumber;
  from: string;
  to: string;
}
export type SubscriptionOwnerTransferRequestedEvent = TypedEvent<
  [BigNumber, string, string],
  SubscriptionOwnerTransferRequestedEventObject
>;

export type SubscriptionOwnerTransferRequestedEventFilter =
  TypedEventFilter<SubscriptionOwnerTransferRequestedEvent>;

export interface SubscriptionOwnerTransferredEventObject {
  subscriptionId: BigNumber;
  from: string;
  to: string;
}
export type SubscriptionOwnerTransferredEvent = TypedEvent<
  [BigNumber, string, string],
  SubscriptionOwnerTransferredEventObject
>;

export type SubscriptionOwnerTransferredEventFilter =
  TypedEventFilter<SubscriptionOwnerTransferredEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface FunctionsBillingRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FunctionsBillingRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_CONSUMERS(overrides?: CallOverrides): Promise<[number]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSubscription(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateCost(
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      donFee: PromiseOrValue<BigNumberish>,
      registryFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fulfillAndBill(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      transmitter: PromiseOrValue<string>,
      signers: PromiseOrValue<string>[],
      signerCount: PromiseOrValue<BigNumberish>,
      reportValidationGas: PromiseOrValue<BigNumberish>,
      initialGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAuthorizedSenders(overrides?: CallOverrides): Promise<[string[]]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, number, string, string] & {
        maxGasLimit: number;
        stalenessSeconds: number;
        gasAfterPaymentCalculation: BigNumber;
        fallbackWeiPerUnitLink: BigNumber;
        gasOverhead: number;
        linkAddress: string;
        linkPriceFeed: string;
      }
    >;

    getCurrentsubscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRequestConfig(overrides?: CallOverrides): Promise<[number, string[]]>;

    getRequiredFee(
      arg0: PromiseOrValue<BytesLike>,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string[]] & {
        balance: BigNumber;
        owner: string;
        consumers: string[];
      }
    >;

    getSubscriptionOwner(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    getTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      link: PromiseOrValue<string>,
      linkEthFeed: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onTokenTransfer(
      arg0: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracleWithdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerCancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingRequestExists(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recoverFunds(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      maxGasLimit: PromiseOrValue<BigNumberish>,
      stalenessSeconds: PromiseOrValue<BigNumberish>,
      gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>,
      fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>,
      gasOverhead: PromiseOrValue<BigNumberish>,
      requestTimeoutSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startBilling(
      data: PromiseOrValue<BytesLike>,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeoutRequests(
      requestIdsToTimeout: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_CONSUMERS(overrides?: CallOverrides): Promise<number>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptSubscriptionOwnerTransfer(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addConsumer(
    subscriptionId: PromiseOrValue<BigNumberish>,
    consumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelSubscription(
    subscriptionId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSubscription(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateCost(
    gasLimit: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    donFee: PromiseOrValue<BigNumberish>,
    registryFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fulfillAndBill(
    requestId: PromiseOrValue<BytesLike>,
    response: PromiseOrValue<BytesLike>,
    err: PromiseOrValue<BytesLike>,
    transmitter: PromiseOrValue<string>,
    signers: PromiseOrValue<string>[],
    signerCount: PromiseOrValue<BigNumberish>,
    reportValidationGas: PromiseOrValue<BigNumberish>,
    initialGas: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAuthorizedSenders(overrides?: CallOverrides): Promise<string[]>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber, number, string, string] & {
      maxGasLimit: number;
      stalenessSeconds: number;
      gasAfterPaymentCalculation: BigNumber;
      fallbackWeiPerUnitLink: BigNumber;
      gasOverhead: number;
      linkAddress: string;
      linkPriceFeed: string;
    }
  >;

  getCurrentsubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  getRequestConfig(overrides?: CallOverrides): Promise<[number, string[]]>;

  getRequiredFee(
    arg0: PromiseOrValue<BytesLike>,
    arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscription(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string[]] & {
      balance: BigNumber;
      owner: string;
      consumers: string[];
    }
  >;

  getSubscriptionOwner(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    link: PromiseOrValue<string>,
    linkEthFeed: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAuthorizedSender(
    sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onTokenTransfer(
    arg0: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracleWithdraw(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerCancelSubscription(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingRequestExists(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recoverFunds(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeConsumer(
    subscriptionId: PromiseOrValue<BigNumberish>,
    consumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestSubscriptionOwnerTransfer(
    subscriptionId: PromiseOrValue<BigNumberish>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthorizedSenders(
    senders: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    maxGasLimit: PromiseOrValue<BigNumberish>,
    stalenessSeconds: PromiseOrValue<BigNumberish>,
    gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>,
    fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>,
    gasOverhead: PromiseOrValue<BigNumberish>,
    requestTimeoutSeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startBilling(
    data: PromiseOrValue<BytesLike>,
    billing: FunctionsBillingRegistryInterface.RequestBillingStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeoutRequests(
    requestIdsToTimeout: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_CONSUMERS(overrides?: CallOverrides): Promise<number>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createSubscription(overrides?: CallOverrides): Promise<BigNumber>;

    estimateCost(
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      donFee: PromiseOrValue<BigNumberish>,
      registryFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillAndBill(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      transmitter: PromiseOrValue<string>,
      signers: PromiseOrValue<string>[],
      signerCount: PromiseOrValue<BigNumberish>,
      reportValidationGas: PromiseOrValue<BigNumberish>,
      initialGas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getAuthorizedSenders(overrides?: CallOverrides): Promise<string[]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, number, string, string] & {
        maxGasLimit: number;
        stalenessSeconds: number;
        gasAfterPaymentCalculation: BigNumber;
        fallbackWeiPerUnitLink: BigNumber;
        gasOverhead: number;
        linkAddress: string;
        linkPriceFeed: string;
      }
    >;

    getCurrentsubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestConfig(overrides?: CallOverrides): Promise<[number, string[]]>;

    getRequiredFee(
      arg0: PromiseOrValue<BytesLike>,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string[]] & {
        balance: BigNumber;
        owner: string;
        consumers: string[];
      }
    >;

    getSubscriptionOwner(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      link: PromiseOrValue<string>,
      linkEthFeed: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onTokenTransfer(
      arg0: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleWithdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerCancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingRequestExists(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoverFunds(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      maxGasLimit: PromiseOrValue<BigNumberish>,
      stalenessSeconds: PromiseOrValue<BigNumberish>,
      gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>,
      fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>,
      gasOverhead: PromiseOrValue<BigNumberish>,
      requestTimeoutSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startBilling(
      data: PromiseOrValue<BytesLike>,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    timeoutRequests(
      requestIdsToTimeout: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuthorizedSendersChanged(address[],address)"(
      senders?: null,
      changedBy?: null
    ): AuthorizedSendersChangedEventFilter;
    AuthorizedSendersChanged(
      senders?: null,
      changedBy?: null
    ): AuthorizedSendersChangedEventFilter;

    "BillingEnd(bytes32,uint64,uint96,uint96,uint96,bool)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      subscriptionId?: null,
      signerPayment?: null,
      transmitterPayment?: null,
      totalCost?: null,
      success?: null
    ): BillingEndEventFilter;
    BillingEnd(
      requestId?: PromiseOrValue<BytesLike> | null,
      subscriptionId?: null,
      signerPayment?: null,
      transmitterPayment?: null,
      totalCost?: null,
      success?: null
    ): BillingEndEventFilter;

    "BillingStart(bytes32,tuple)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      commitment?: null
    ): BillingStartEventFilter;
    BillingStart(
      requestId?: PromiseOrValue<BytesLike> | null,
      commitment?: null
    ): BillingStartEventFilter;

    "ConfigSet(uint32,uint32,uint256,int256,uint32)"(
      maxGasLimit?: null,
      stalenessSeconds?: null,
      gasAfterPaymentCalculation?: null,
      fallbackWeiPerUnitLink?: null,
      gasOverhead?: null
    ): ConfigSetEventFilter;
    ConfigSet(
      maxGasLimit?: null,
      stalenessSeconds?: null,
      gasAfterPaymentCalculation?: null,
      fallbackWeiPerUnitLink?: null,
      gasOverhead?: null
    ): ConfigSetEventFilter;

    "FundsRecovered(address,uint256)"(
      to?: null,
      amount?: null
    ): FundsRecoveredEventFilter;
    FundsRecovered(to?: null, amount?: null): FundsRecoveredEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RequestTimedOut(bytes32)"(
      requestId?: PromiseOrValue<BytesLike> | null
    ): RequestTimedOutEventFilter;
    RequestTimedOut(
      requestId?: PromiseOrValue<BytesLike> | null
    ): RequestTimedOutEventFilter;

    "SubscriptionCanceled(uint64,address,uint256)"(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      to?: null,
      amount?: null
    ): SubscriptionCanceledEventFilter;
    SubscriptionCanceled(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      to?: null,
      amount?: null
    ): SubscriptionCanceledEventFilter;

    "SubscriptionConsumerAdded(uint64,address)"(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      consumer?: null
    ): SubscriptionConsumerAddedEventFilter;
    SubscriptionConsumerAdded(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      consumer?: null
    ): SubscriptionConsumerAddedEventFilter;

    "SubscriptionConsumerRemoved(uint64,address)"(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      consumer?: null
    ): SubscriptionConsumerRemovedEventFilter;
    SubscriptionConsumerRemoved(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      consumer?: null
    ): SubscriptionConsumerRemovedEventFilter;

    "SubscriptionCreated(uint64,address)"(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      owner?: null
    ): SubscriptionCreatedEventFilter;
    SubscriptionCreated(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      owner?: null
    ): SubscriptionCreatedEventFilter;

    "SubscriptionFunded(uint64,uint256,uint256)"(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      oldBalance?: null,
      newBalance?: null
    ): SubscriptionFundedEventFilter;
    SubscriptionFunded(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      oldBalance?: null,
      newBalance?: null
    ): SubscriptionFundedEventFilter;

    "SubscriptionOwnerTransferRequested(uint64,address,address)"(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): SubscriptionOwnerTransferRequestedEventFilter;
    SubscriptionOwnerTransferRequested(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): SubscriptionOwnerTransferRequestedEventFilter;

    "SubscriptionOwnerTransferred(uint64,address,address)"(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): SubscriptionOwnerTransferredEventFilter;
    SubscriptionOwnerTransferred(
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null
    ): SubscriptionOwnerTransferredEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    MAX_CONSUMERS(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSubscription(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateCost(
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      donFee: PromiseOrValue<BigNumberish>,
      registryFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillAndBill(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      transmitter: PromiseOrValue<string>,
      signers: PromiseOrValue<string>[],
      signerCount: PromiseOrValue<BigNumberish>,
      reportValidationGas: PromiseOrValue<BigNumberish>,
      initialGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAuthorizedSenders(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentsubscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredFee(
      arg0: PromiseOrValue<BytesLike>,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionOwner(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      link: PromiseOrValue<string>,
      linkEthFeed: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onTokenTransfer(
      arg0: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracleWithdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerCancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRequestExists(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverFunds(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig(
      maxGasLimit: PromiseOrValue<BigNumberish>,
      stalenessSeconds: PromiseOrValue<BigNumberish>,
      gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>,
      fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>,
      gasOverhead: PromiseOrValue<BigNumberish>,
      requestTimeoutSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startBilling(
      data: PromiseOrValue<BytesLike>,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeoutRequests(
      requestIdsToTimeout: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_CONSUMERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSubscription(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateCost(
      gasLimit: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      donFee: PromiseOrValue<BigNumberish>,
      registryFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillAndBill(
      requestId: PromiseOrValue<BytesLike>,
      response: PromiseOrValue<BytesLike>,
      err: PromiseOrValue<BytesLike>,
      transmitter: PromiseOrValue<string>,
      signers: PromiseOrValue<string>[],
      signerCount: PromiseOrValue<BigNumberish>,
      reportValidationGas: PromiseOrValue<BigNumberish>,
      initialGas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAuthorizedSenders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentsubscriptionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredFee(
      arg0: PromiseOrValue<BytesLike>,
      arg1: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionOwner(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      link: PromiseOrValue<string>,
      linkEthFeed: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onTokenTransfer(
      arg0: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracleWithdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerCancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRequestExists(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverFunds(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthorizedSenders(
      senders: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      maxGasLimit: PromiseOrValue<BigNumberish>,
      stalenessSeconds: PromiseOrValue<BigNumberish>,
      gasAfterPaymentCalculation: PromiseOrValue<BigNumberish>,
      fallbackWeiPerUnitLink: PromiseOrValue<BigNumberish>,
      gasOverhead: PromiseOrValue<BigNumberish>,
      requestTimeoutSeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startBilling(
      data: PromiseOrValue<BytesLike>,
      billing: FunctionsBillingRegistryInterface.RequestBillingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeoutRequests(
      requestIdsToTimeout: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
